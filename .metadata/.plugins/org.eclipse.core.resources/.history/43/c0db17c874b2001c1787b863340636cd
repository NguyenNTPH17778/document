package controller;

import java.io.IOException;
import java.util.List;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;

import DAO.CategoriesDAO;
import DAO.UserDAO;
import Entities.Category;
import Entities.User;

@WebServlet({
	

	"/category/index",
	"/category/create",
	"/category/store",
	"/category/edit",
	"/category/update",
	"/category/delete",
	
})
public class CategoriesServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
      
	private CategoriesDAO cteDao;
	private UserDAO userDAO;
	

    public CategoriesServlet() {
        this.cteDao = new CategoriesDAO();
        this.userDAO = new UserDAO();
        
    }

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String uri = request.getRequestURI();
		
		if (uri.contains("index")) {
			this.index(request, response);
		} else if (uri.contains("create")) {
			this.create(request, response);
		} else if (uri.contains("edit")) {
			this.edit(request, response);
		} else if (uri.contains("delete")) {
			this.delete(request, response);
		}
		
	}


	private void delete(HttpServletRequest request, HttpServletResponse response) throws IOException {
		try {
			String s=request.getParameter("id");
			int id=Integer.parseInt(s);
			Category entity =this.cteDao.fineById(id);
			this.cteDao.delete(entity);
		} catch (Exception e) {
			
		}
		response.sendRedirect(request.getContextPath() + "/category/index");

		
	}


	private void edit(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String idString=request.getParameter("id");
		int id=Integer.parseInt(idString);
		Category entity=this.cteDao.findById(id);
		request.setAttribute("category", entity);
		request.setAttribute("view", "/views/categories/edit.jsp");
		request.getRequestDispatcher("/views/layout.jsp").forward(request, response);
		
	}

	private void create(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		List<User> ds = this.userDAO.all();
		request.setAttribute("dsUser", ds);
		request.getRequestDispatcher("/views/categories/create.jsp"
		).forward(request, response);
		request.getRequestDispatcher("/views/layout.jsp").forward(request, response);

		
	}

	private void index(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		List<Category> ds =  this.cteDao.all();
		request.setAttribute("ds", ds);
		request.setAttribute("now", new Date());
		request.setAttribute("view","/views/categories/index.jsp");
		request.getRequestDispatcher("/views/layout.jsp").forward(request, response);

		
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		String uri = request.getRequestURI();
		
			if (uri.contains("store")) {
				this.store(request, response);
			} else if (uri.contains("update")) {
				this.update(request, response);
			} else {
				// 404
			}
	}

	private void update(HttpServletRequest request, HttpServletResponse response) throws IOException {
		
		String idString=request.getParameter("id");
		try {
			int id=Integer.parseInt(idString);
			Category entity=this.cteDao.findById(id);	
			BeanUtils.populate(entity, request.getParameterMap());
			this.cteDao.update(entity);
		} catch (Exception e) {
			// TODO: handle exception
		}
		response.sendRedirect(request.getContextPath() + "/category/index");

	}

	private void store(HttpServletRequest request, HttpServletResponse response) throws IOException {
//		try {
//			Category entity=new Category();
//			BeanUtils.populate(entity, request.getParameterMap());
//			this.cteDao.create(entity);
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//		response.sendRedirect(request.getContextPath() + "/category/index");
//		
//	}
		
		String ten = request.getParameter("ten");
		int userId = Integer.parseInt(
			request.getParameter("user_id")
		);
		
		User user = this.userDAO.findById(userId);
		Category cate = new Category();
		cate.setTen(ten);
		cate.setUser(user);
		
		this.cteDao.create(cate);
	}

}
